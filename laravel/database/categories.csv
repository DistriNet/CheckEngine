id,parent,title,description,execute_order,live,in_default,short_description
1,,Same-Origin Policy,"<p>The same-origin policy (SOP) is arguably the most important principle in browser security. In this category, we test the browser's SOP implementation for DOM access, cookies, and requests     using the <em>XMLHttpRequest</em> API.</p>",1,t,t,"Covers the browser's implementation of the <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">same-origin policy</a>."
2,1,DOM access,"<p>In all document object model (DOM) tests, we are always testing whether one page can access the DOM of another. In each test we refer to a parent and a child, where the child is an &lt;iframe&gt; inside the parent. When a parent accesses its child frame, it uses the <span class=""tt"">contentWindow</span> property. When a child frame accesses its parent, it does so with the <span class=""tt"">window.parent</span> property. In each test, one page tries to access the <span class=""tt"">document.location.protocol</span> property of the other. This is one of many properties for which access should be restricted by the same-origin policy.</p><p>DOM access should be denied by the browser whenever the origins of the two pages are different. An origin is usually a (scheme, host, port) tuple, except Internet Explorer doesn't compare the port when comparing two origins. The vast majority of the SOP for DOM tests below test cross-origin requests in which the hosts are different.</p><p>We also test that the <span class=""tt"">document.domain</span> can be used to loosen the same-origin policy restrictions. This property allows two co-operating pages to allow cross-origin DOM access between them. Any page may set <span class=""tt"">document.domain</span> to be a subset of its current hostname. If two pages each set their <span class=""tt"">document.domain</span> properties to the same value, they will appear to have the same origin and so DOM access between them will be granted. It is not sufficient for just one of the two pages to set their <span class=""tt"">document.domain</span> value, and the value must be a fully-qualified right-hand fragment of the page's current hostname. We test a wide range of legal and illegal <span class=""tt"">document.domain</span> values, and that DOM access is always correctly allowed or blocked.</p>",1,t,t,
3,1,"DOM access - parent https://browseraudit.com, child https://test.browseraudit.com - child accessing parent",,2,t,t,
4,1,"DOM access - parent https://browseraudit.com, child https://test.browseraudit.com - parent accessing child",,3,t,t,
5,1,"DOM access - parent https://test.browseraudit.com, child https://browseraudit.com - child accessing parent",,4,t,t,
6,1,"DOM access - parent https://test.browseraudit.com, child https://browseraudit.com - parent accessing child",,5,t,t,
8,1,Cookies - domain scope,"<p>The same-origin policy for cookies defines when a browser should send a cookie with an HTTP request. Cookies often contain private and sensitive data, and so should only be sent with requests to the intended origin. The scope of a cookie (that is, the requests it will be sent with) can be broadened with the <em>Domain</em> parameter. It can be set to any fully-qualified right-hand segment of the qualified hostname, up to one level below the TLD. This means that a page at <span class=""tt"">payments.secure.example.com</span> may tell the browser to send a cookie to <span class=""tt"">*.secure.example.com</span> or <span class=""tt"">*.example.com</span> but not to <span class=""tt"">www.payments.secure.com</span> (since this is more specific than the page's current hostname) or <span class=""tt"">*.com</span> (since this is too broad).</p><p>We test that the browser's SOP for cookies behaves correctly when domain scope is set with the <em>Domain</em> parameter. We also test that illegal values are not allowed.</p>",7,t,t,
9,1,Cookies - illegal domain values,,8,t,t,
10,1,Cookies - path scope,"<p>Whilst the <em>Domain</em> parameter of a cookie can be used to broaden its scope, the <em>Path</em> property can be used to <strong>restrict</strong> a cookie's scope. It specifies a path prefix, telling the browser to send the cookie only with requests matching that path. The paths are matched from the left, so a cookie with a path of <span class=""tt"">/user</span> will be sent with requests to both <span class=""tt"">/user/status</span> and <span class=""tt"">/user/account</span>. We test this behaviour below.</p>",9,t,t,
11,,Content Security Policy,"<p>In this category, we test that the browser correctly implements <a href=""http://www.w3.org/TR/CSP/"" target=""_blank"">Content Security Policy 1.0</a> (Sterne, Brandon, and Adam Barth, 2012). This means that we test the Content Security Policy (CSP) using only the <span class=""tt"">Content-Security-Policy</span> header, and not the <span class=""tt"">X-Content-Security-Policy</span> and <span class=""tt"">X-WebKit-CSP</span> headers used in experimental implementations in older browsers. A browser that implements the CSP using one of the latter two headers will fail many of the below tests.</p><p>The CSP is a mechanism used to mitigate cross-site scripting (XSS) attacks. It introduces the concept of <strong>source whitelists</strong>. A web developer can use the <span class=""tt"">Content-Security-Policy</span> header to explicitly specify the sources from which scripts, stylesheets and many other resources may be loaded. This can be done on a per-document basis by serving a different header value with each page.</p><p>We test a variety of origin mismatches for many resource types. At present, we only check origins that differ in host/domain. We do not test for origins that differ in scheme or port. A test referring to a &ldquo;remote&rdquo; resource is referring to a resource loaded from our subdomain <span class=""tt"">test.browseraudit.com</span>. A &ldquo;local&ldquo; resource is one loaded from the same origin as this page.</p><p>The number of tests executed below depends on your browser. For example, some tests will only be executed if a Flash plugin is installed.</p>",2,t,t,"Covers the browser's implementation of the <a href=""http://www.w3.org/TR/2012/CR-CSP-20121115/"">Content Security Policy 1.0</a>."
12,11,stylesheets,,1,t,t,
13,11,scripts,,2,t,t,
14,11,'unsafe-inline',,3,t,t,
15,11,'unsafe-eval',,4,t,t,
16,11,objects,,5,t,t,
17,11,images,,6,t,t,
18,11,media,,7,t,t,
19,11,frames,,8,t,t,
20,,Cross-Origin Resource Sharing,"<p>In this category of tests we test the browser's implementation of Cross-Origin Resource Sharing (CORS) as <a href=""http://www.w3.org/TR/2014/REC-cors-20140116/"">specified by the W3C</a> (Van Kesteren, Anne, 2014). CORS is an extension to the <em>XMLHttpRequest</em> API that allows a website to carry out cross-origin communications. This means that client-side JavaScript can send an <em>XMLHttpRequest</em> to a URL on a domain  (or scheme or port) other than the one from which it originated &ndash; something that is not otherwise possible due to the same-origin policy.</p><p>Cross-origin resource sharing allows a request to be made to a server at a different origin only if the server receiving the request explicitly allows it. That is, the server states whether or not the origin of the requesting document is allowed to make a cross-origin request to that URL. To achieve this, CORS defines a mechanism that allows the browser and server to know just enough about each other so that they can determine whether or not to allow the cross-origin request. This is primarily achieved by two key headers: an <span class=""tt"">Origin</span> header sent by the browser with the request, and an <span class=""tt"">Access-Control-Allow-Origin</span> header sent in the server's response. There are other CORS-related headers whose implementations we also test.</p>",3,t,t,"Covers the browser's implementation of the <a href=""http://www.w3.org/TR/2014/REC-cors-20140116/"">Cross-Origin Resource Sharing</a> standard."
21,20,Access-Control-Allow-Origin,,1,t,t,
22,20,Access-Control-Allow-Methods,,2,t,t,
23,20,Access-Control-Allow-Headers,,3,t,t,
24,20,Access-Control-Expose-Headers,,4,t,t,
25,,Cookies,"<p>A lot of cookie security relates to the same-origin policy, and the setting of cookie scope through the <em>Domain</em> and <em>Path</em> attributes. This is covered in the <strong>Same-Origin Policy</strong> section. In this section, we are testing two other aspects of cookie security: the <em>HttpOnly</em> and <em>Secure</em> attributes. We test the behaviour of these attributes as defined in <a href=""http://tools.ietf.org/html/rfc6265"" target=""_blank"">RFC 6265</a> &ldquo;HTTP state management mechanism&rdquo; (Kristol, David M. and Lou Montulli, 2000).</p>",4,t,t,
26,25,HttpOnly flag,"<p>The <em>HttpOnly</em> attribute of a cookie instructs the browser to reveal that cookie only through an HTTP API. That is, the cookie may be transmitted to a server via an HTTP request, but should not be made available to client-side scripts. The benefit of this is that, even if a cross-site scripting (XSS) vulnerability is exploited, the cookie cannot be stolen.</p><p><em>HttpOnly</em> cookies are supported by all major browsers. The notable exception is Android 2.3's stock browser.</p><p>We have three tests. In the first test, we simply check that an <em>HttpOnly</em> cookie sent from the server cannot then be accessed by JavaScript. The latter two tests are testing that <em>HttpOnly</em> cookies cannot be created by JavaScript.</p>",1,t,t,
27,25,Secure flag,"<p>When a cookie has the <em>Secure</em> attribute set, a compliant browser will include the cookie in an HTTP request only if the request is transmitted over a secure channel, i.e. an HTTPS request. This keeps the cookie confidential; an attacker would not be able to read it even if he were able to intercept the connection between the victim and the destination server.</p><p>The <em>Secure</em> flag is supported by all major browsers.</p><p>We have four tests, testing the behaviour of the <em>Secure</em> flag both when the cookies are set by the server and set by JavaScript. In each pair of tests, the first checks that a cookie with the <em>Secure</em> flag is sent to the server with an HTTPS request. The second test is the interesting one: it checks that a secure cookie is <strong>not</strong> sent with a request over plain HTTP.</p>",2,t,t,
28,,Request Headers,"<p>In this category, we test browser security features related to  miscellaneous HTTP request headers that do not fit into any other category.</p>",5,t,t,
29,28,Referer,"<p>The <span class=""tt"">Referer</span> header should not be included in a non-secure request if the referring page was transferred with a secure protocol. This behaviour is defined in <a href=""https://tools.ietf.org/html/rfc2616"" target=""_blank"">RFC 2616</a> &ldquo;Hypertext transfer protocol–HTTP/1.1&rdquo; (Fielding, Roy, et al., 1999). This behaviour exists because the source of a link might be private information or might reveal an otherwise private information source.</p><p>We test this behaviour by loading an image with a non-secure request and checking that the <span class=""tt"">Referer</span> header was not sent to the server with request for the image.</p>",1,t,t,
30,,Response Headers,"<p>In this category, we test browser security features related to  miscellaneous HTTP response headers that do not fit into any other category.</p>",6,t,t,
31,30,X-Frame-Options,"<p><span class=""tt"">X-Frame-Options</span> is a server-side technique that can be used to prevent clickjacking (UI redressing) attacks. Its implementation in current browsers is documented in <a href=""http://tools.ietf.org/html/rfc7034"" target=""_blank"">RFC 7034</a> &ldquo;HTTP Header Field X-Frame-Options&rdquo; (Ross, David, and Tobias Gondrom, 2013). <span class=""tt"">X-Frame-Options</span> is a response header that specifies whether or not the document being served is allowed to be rendered in a frame. More specifically, the header specifies the <strong>origin</strong> (scheme, host and port) that is allowed to render the document in a frame.</p><p>We test for correct behaviour of the <span class=""tt"">DENY</span>, <span class=""tt"">SAMEORIGIN</span> and <span class=""tt"">ALLOW-FROM</span> header values. Our tests use only <span class=""tt"">&lt;iframe&gt;</span> tags, although <span class=""tt"">X-Frame-Options</span> can also apply to <span class=""tt"">&lt;frame&gt;</span>, <span class=""tt"">&lt;object&gt;</span>, <span class=""tt"">&lt;applet&gt;</span> and <span class=""tt"">&lt;embed&gt;</span> tags.</p><p><span class=""tt"">X-Frame-Options</span> is supported in all modern browsers, although the implementations across browsers differ. Some browsers behave differently when dealing with nested frames, so we do not test these cases at all as there is no defined correct behaviour. Note also that not all browsers support the <span class=""tt"">ALLOW-FROM</span> value.</p>",1,t,t,
32,30,Strict-Transport-Security,"<p>HTTP Strict Transport Security (HSTS) is a security mechanism that allows a server to instruct browsers only to communicate with it over a secure (HTTPS) connection for that domain. It exists primarily to defend against man-in-the-middle attacks in which an attacker is able to intercept his victim's network connection. The server sends this instruction with a <span class=""tt"">Strict-Transport-Security</span> header, defined in <a href=""http://tools.ietf.org/html/rfc6797"" target=""_blank"">RFC 6797</a> &ldquo;HTTP Strict Transport Security (HSTS)&rdquo; (Hodges, Jeff, Collin Jackson, and Adam Barth, 2012).</p><p>When HSTS is enabled on a domain, a compliant browser must rewrite any plain HTTP requests to that domain to use HTTPS. This includes both URLs entered into the navigation bar by the user, and elements loaded by a webpage. The <span class=""tt"">Strict-Transport-Security</span> header should only be sent in an HTTPS response. If the browser receives the header in a response sent over plain HTTP, it should be ignored.</p><p>We test the basic behaviour of HSTS and the <span class=""tt"">includeSubDomains</span> option. We also ensure that the header is ignored when transferred with an insecure protocol, and that the HSTS state correctly expires based on the <span class=""tt"">max-age</span> value. All of these tests work by testing whether a request for an image at <span class=""tt"">http://browseraudit.com/set_protocol</span> is rewritten to use HTTPS or not.</p><p>Some of today's browsers support HSTS. The notable exception is Internet Explorer, which does not support it even in version 11. Safari has only supported HSTS since OS X Mavericks.</p>",2,t,t,"Covers the browser's implementation of the <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security"">HTTP Strict Transport Security</a> standard."
33,11,fonts,,9,t,t,
34,11,report-uri,"<p>These tests check that the browser sends a <span class=""tt"">POST</span> request to the server when the CSP is violated and a <span class=""tt"">report-uri</span> has been specified in the header. Note that some anti-tracking browser addons may block these report requests. The browser should not follow any 3xx redirects when sending violation reports.</p>",12,t,t,
35,11,connect-src,,10,t,t,
36,11,sandbox,"<p>The ""sandbox"" directive enforces a sandbox policy on iframe elements. It is an optional part of the Content Security Policy 1.0 specification: web browsers are not required to implement it.</p>",11,t,t,
37,11,Report-Only,"<p>These tests check that no resources are blocked when the <span class=""tt"">Content-Security-Policy-Report-Only</span> header is used instead of <span class=""tt"">Content-Security-Policy</span>. We are not testing whether or not violation reports are sent &ndash; this is done in the report-uri category.</p>",13,f,t,
